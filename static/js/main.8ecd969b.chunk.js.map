{"version":3,"sources":["icons/memoryCellCircuit.svg","icons/memoryBlock.svg","icons/memoryBlocks.svg","icons/memoryBank.svg","icons/memoryBankRowCol.svg","icons/memoryBankRasCas.svg","helpers/BEM.js","redux/actions/index.js","redux/reducers/memory.red.js","helpers/consts.js","redux/reducers/pinsInfo.red.js","hooks/reactRedux.hks.js","redux/reducers/visualizationSettings.red.js","hooks/memoryView.hks.js","components/ToggleButtons/ToggleButtons.js","components/Memory/Frame.js","components/Memory/Memory.js","components/PinsBlock/Pin/Pin.js","components/PinsBlock/CrossPinsNotation/CrossPinsNotation.js","hooks/index.js","components/PinsBlock/PinsBlock.js","components/MemoryControls/DataControls.js","components/MemoryControls/AddressControls.js","components/MemoryControls/StateControls.js","components/MemoryControls/ClockControls.js","components/MemoryControls/MemoryControls.js","components/VisualizationSettings/VisualizationSettings.js","components/HowTo/HowTo.js","components/RAMVisualization/RAMVisualization.js","components/ArticleSection/ArticleSection.js","components/RAMArticle/RAMArticle.js","components/App/App.js","serviceWorker.js","redux/reducers/index.js","redux/sagas/index.js","store.js","index.js"],"names":["module","exports","getBEMPAth","b","e","m","base","join","reduce","str","elementName","modifiers","Array","isArray","filter","Boolean","Object","entries","value","map","a","men","women","mars","venera","setPins","type","payload","setClockPin","setAddressRowPins","setAddressColPins","setSelectedRowInMemory","setSelectedColInMemory","setPinsTypeWidth","width","setIsPinNotationClassical","isClassical","setMemoryDisplayType","displayType","setIsTactingEnabled","isEnabled","setIsRasCasEnabled","setDatumInMemory","datum","address","readDatumFromMemory","setMemory","data","setTacts","numberOfTacts","setCurrentTacts","initialState","memoryArray","fill","isDirty","selectedAddress","undefined","row","col","memory","state","action","update","parseInt","selectMemory","path","selectSelectedRow","selectSelectedColumn","MEMORY_MODE","MEMORY_STATE","PINS","PIN_STATE","ON","OFF","VIEW_OPTIONS","label","repeat","pinsInfo","tacts","currentTacts","updatedValue","padStart","slice","length","selectData","selectDataWidth","selectAddressWidth","selectEnabled","selectMemoryMode","selectClock","selectTacts","selectCurrentTacts","selectRas","selectCas","selectAddressRowPins","selectAddressColPins","selectAddressPins","addressRow","addressColumn","useAction","actionFn","dispatch","useDispatch","memedAct","useMemo","useCallback","apply","arguments","isPinsNotationClassical","isTactingEnabled","isRasCasEnabled","memoryDisplayType","visualizationSettings","selectIsPinNotationClassical","selectIsTactingEnabled","selectMemoryDisplayType","selectIsRasCasEnabled","useMemoryCSSMeasures","useSelector","addressLength","dataLength","totalColumns","Math","pow","floor","cellIndex","column","totalRows","useCellOrder","getCellOrder","cellWidth","cellHeight","containerWidth","containerHeight","ceil","widthForChar","cellY","cellX","textX","textY","cellMargin","colIndex","x","y","rowIndex","verticalOffset","fontSize","height","useReadWriteMemoryDatum","setPinsAct","setSelectedRowInMemoryAct","setSelectedColInMemoryAct","readDatumFromMemoryAct","memorizedInfo","setDatumInMemoryAct","rasAddr","casAddr","dataWidth","memoryMode","selectedRow","selectedCol","isRas","useEffect","setDatum","BEM","ToggleButtons","options","handleSelect","selectedValue","containerClassName","onSelect","className","key","onClick","Frame","coords","measures","isShowSelected","transform","Memory","setMemoryDisplayTypeAct","preselectedCol","selectedColumn","preselectedRow","addressWidth","preselectedAddress","isFullAddressSelected","getCellCoordinates","getColCoordinates","getRowCoordinates","headerHeight","rowMeasures","colMeasures","selectedRowIndex","preselectedRowIndex","selectedColIndex","preselectedColIndex","selectedRowCoords","preselectedRowCoords","selectedColCoords","preselectedColCoords","isShowSelectedRow","isShowSelectedCol","renderColumnHeader","text","style","minHeight","cell","preselectedAddressStyles","selectedAddressStyles","dirtyAddressStyles","id","Pin","pinState","pinWidth","handleDataPinClick","isDisabled","isNotationClassical","isOneOfMany","significance","x1","y1","x2","y2","CrossPinsNotation","numberOfPins","crossedNotationYPosition","PIN_HEIGHT","previousIsNotationClassical","initialValue","prev","useRef","current","usePrevious","PinsBlock","binaryData","setBinaryData","useState","split","binaryDataArray","setBinaryDataArray","viewBoxWidth","DEFAULT_PIN_WIDTH","getIsFirstOrLastPin","includes","pinIndex","updatedPinValue","Number","updatedDataArray","renderPin","pin","defaultPinWidth","viewBox","DataControls","setPinsWidthAct","name","min","max","defaultValue","onInput","ev","target","AddressControls","ras","cas","setAddressRowPinsAct","setAddressColPinsAct","padLength","addressPins","step","StateControls","enabled","setMemoryState","readWrite","setEnabled","ClockControls","clock","setTactsAct","setClockPinAct","resetClockTimeout","setTimeout","clearTimeout","useTacting","handleClock","onChange","pinNotationOptions","MemoryControls","setIsPinNotationClassicalAct","isPinNotationClassical","setMemoryAct","compose","useControlMemoryDatumWidth","VisualizationSettings","setIsTactingEnabledAct","setCurrentTactsAct","setIsRasCasEnabledAct","checked","HowTo","RAMVisualization","ArticleSection","children","displayedName","RAMArticle","href","src","MemoryCellCircuit","MemoryBlock","MemoryBlocks","MemoryBank","MemoryBankRowCol","MemoryBankRasCas","App","window","location","hostname","match","combineReducers","onReadDatumFromMemory","resetAddressRowAndCol","onWidthChange","enableRasCasPins","onSetTacting","updateNumberOfTacts","rootSaga","delay","time","Promise","resolve","select","put","call","updatedMemory","memoryCell","index","ramLatency","all","takeEvery","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","configureStore","store","createStore","reducers","applyMiddleware","run","sagas","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ecd969b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/memoryCellCircuit.375091a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/memoryBlock.7657086e.svg\";","module.exports = __webpack_public_path__ + \"static/media/memoryBlocks.31663eda.svg\";","module.exports = __webpack_public_path__ + \"static/media/memoryBank.23c42a43.svg\";","module.exports = __webpack_public_path__ + \"static/media/memoryBankRowCol.4feac339.svg\";","module.exports = __webpack_public_path__ + \"static/media/memoryBankRasCas.dc6a5e8d.svg\";","// Author: neformal13 https://gist.github.com/neformal13/00ac31d02eedf669768bd106482d2d3c\ntype Modifier = any[] | Record<string, any>;\ntype B = (b: string) => (elementName?: string | Modifier, modifiers?: Modifier) => string;\ntype GetBEMPAth = (b: string, e: string, m: string[]) => string;\n\nconst ELEMENT_SEPARATOR = \"__\";\nconst MODIFIER_SEPARATOR = \"_\";\n\nconst getBEMPAth: GetBEMPAth = (b, e, m) => {\n  const base = e !== \"\" ? [b, e].join(ELEMENT_SEPARATOR) : b;\n\n  return `${base} ${m.reduce((str, m) => `${str} ${base}${MODIFIER_SEPARATOR}${m}`, \"\")}`;\n};\n\nconst b: B =\n  (b) =>\n  (elementName, modifiers = []) => {\n    modifiers = typeof elementName === \"string\" ? modifiers : elementName || [];\n\n    return getBEMPAth(\n      b,\n      typeof elementName === \"string\" ? elementName : \"\",\n      Array.isArray(modifiers)\n        ? modifiers.filter(Boolean)\n        : Object.entries(modifiers)\n            .filter(([, value]) => Boolean(value))\n            .map(([key]) => key)\n    );\n  };\n\nexport default b;\n\n// Tests\nconst a = b(\"Hello\"); /*?*/\na(); /*?*/\na([\"men\", \"women\"]); /*?*/\na({ men: true, women: false }); /*?*/\na(\"world\"); /*?*/\na(\"world\", [\"mars\", \"venera\"]); /*?*/\na(\"world\", { mars: true, venera: false }); /*?*/\n","export const SET_PINS_WIDTH = \"SET_PINS_WIDTH\";\nexport const SET_PINS = \"SET_PINS\";\n\nexport const SET_CLOCK_PIN = \"SET_CLOCK_PIN\";\n\n// These actions are used for RAS / CAS mode,\n// when row and column address are set separately\nexport const SET_RAS_PIN = \"SET_RAS_PIN\";\nexport const SET_CAS_PIN = \"SET_CAS_PIN\";\n\nexport const SET_ADDRESS_ROW_PINS = \"SET_ADDRESS_ROW_PINS\";\nexport const SET_ADDRESS_COL_PINS = \"SET_ADDRESS_COL_PINS\";\n\nexport const SET_MEMORY = \"SET_MEMORY\";\nexport const SET_TACTS = \"SET_TACTS\";\nexport const SET_CURRENT_TACTS = \"SET_CURRENT_TACTS\";\n\nexport const TOGGLE_RAS_CAS = \"TOGGLE_RAS_CAS\";\n\nexport const WRITE_DATUM_IN_MEMORY = \"WRITE_DATUM_IN_MEMORY\";\nexport const READ_DATUM_FROM_MEMORY = \"READ_DATUM_FROM_MEMORY\";\n\nexport const SET_IS_PIN_NOTATION_CLASSICAL = \"SET_IS_PIN_NOTATION_CLASSICAL\";\nexport const SET_IS_TACTING_ENABLED = \"SET_IS_TACTING_ENABLED\";\nexport const SET_IS_RAS_CAS_ENABLED = \"SET_IS_RAS_CAS_ENABLED\";\nexport const SET_MEMORY_DISPLAY_TYPE = \"SET_MEMORY_DISPLAY_TYPE\";\n\nexport const SET_SELECTED_ROW_IN_MEMORY = \"SET_SELECTED_ROW_IN_MEMORY\";\nexport const SET_SELECTED_COL_IN_MEMORY = \"SET_SELECTED_COL_IN_MEMORY\";\nexport const SET_SELECTED_ADDRESS_IN_MEMORY = \"SET_SELECTED_ADDRESS_IN_MEMORY\";\n\nexport const RESET_MEMORY = \"RESET_MEMORY\";\nexport const RESET_PINS = \"RESET_PINS\";\nexport const resetMemory = (width = undefined) => ({ type: RESET_MEMORY, payload: { width } });\n\nexport const setPins = (type, value) => ({ type: SET_PINS, payload: { type, value } });\n\nexport const setClockPin = (value) => ({ type: SET_CLOCK_PIN, payload: value });\n\nexport const setRas = (value) => ({ type: SET_RAS_PIN, payload: value });\nexport const setCas = (value) => ({ type: SET_CAS_PIN, payload: value });\n\nexport const setAddressRowPins = (value) => ({ type: SET_ADDRESS_ROW_PINS, payload: value });\nexport const setAddressColPins = (value) => ({ type: SET_ADDRESS_COL_PINS, payload: value });\n\nexport const setSelectedRowInMemory = (value) => ({ type: SET_SELECTED_ROW_IN_MEMORY, payload: value });\nexport const setSelectedColInMemory = (value) => ({ type: SET_SELECTED_COL_IN_MEMORY, payload: value });\nexport const setSelectedAddressInMemory = (value) => ({ type: SET_SELECTED_ADDRESS_IN_MEMORY, payload: value });\n\nexport const setPinsTypeWidth = (type, width) => ({ type: SET_PINS_WIDTH, payload: { type, width } });\n\nexport const setIsPinNotationClassical = (isClassical) => ({\n  type: SET_IS_PIN_NOTATION_CLASSICAL,\n  payload: { isClassical },\n});\n\nexport const setMemoryDisplayType = (displayType) => ({\n  type: SET_MEMORY_DISPLAY_TYPE,\n  payload: { displayType },\n});\n\nexport const setIsTactingEnabled = (isEnabled) => ({\n  type: SET_IS_TACTING_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setIsRasCasEnabled = (isEnabled) => ({\n  type: SET_IS_RAS_CAS_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setDatumInMemory = (datum, address) => ({\n  type: WRITE_DATUM_IN_MEMORY,\n  payload: {\n    datum,\n    address,\n  },\n});\n\nexport const readDatumFromMemory = (address) => ({\n  type: READ_DATUM_FROM_MEMORY,\n  payload: {\n    address,\n  },\n});\n\nexport const setMemory = (data) => {\n  return {\n    type: SET_MEMORY,\n    payload: {\n      data,\n    },\n  };\n};\n\nexport const setTacts = (numberOfTacts) => ({ type: SET_TACTS, payload: numberOfTacts });\nexport const setCurrentTacts = (numberOfTacts) => ({ type: SET_CURRENT_TACTS, payload: numberOfTacts });\n\nexport const toggleRasCas = () => ({ type: TOGGLE_RAS_CAS });\n","import { path, update } from \"ramda\";\nimport {\n  SET_MEMORY,\n  WRITE_DATUM_IN_MEMORY,\n  SET_SELECTED_ADDRESS_IN_MEMORY,\n  SET_SELECTED_ROW_IN_MEMORY,\n  SET_SELECTED_COL_IN_MEMORY,\n} from \"../actions\";\n\nconst initialState = {\n  memoryArray: new Array(16).fill({ datum: \"0000\", isDirty: false }),\n  selectedAddress: { address: undefined, row: undefined, col: undefined },\n};\n\nconst memory = (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_SELECTED_ADDRESS_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { col: undefined, row: undefined, address: payload },\n      };\n    }\n    case SET_SELECTED_ROW_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, row: payload },\n      };\n    }\n    case SET_SELECTED_COL_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, col: payload },\n      };\n    }\n    case WRITE_DATUM_IN_MEMORY: {\n      const { address, datum } = payload;\n      return {\n        ...state,\n        memoryArray: update(parseInt(address, 2), { datum, isDirty: true })(state.memoryArray),\n      };\n    }\n    case SET_MEMORY: {\n      return { ...state, memoryArray: payload.data };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default memory;\n\nexport const selectMemory = (state) => path([\"memory\", \"memoryArray\"], state);\n\nexport const selectSelectedRow = (state) => path([\"memory\", \"selectedAddress\", \"row\"], state);\nexport const selectSelectedColumn = (state) => path([\"memory\", \"selectedAddress\", \"col\"], state);\nexport const selectSelectedAddress = (state) => path([\"memory\", \"selectedAddress\", \"address\"], state);\n","export const MEMORY_MODE = {\n  READ: \"1\",\n  WRITE: \"0\",\n};\n\nexport const MEMORY_STATE = {\n  ENABLED: \"1\",\n  DISABLED: \"0\",\n};\n\nexport const PINS = {\n  RAS: \"RAS\",\n  CAS: \"CAS\",\n  CLOCK: \"clock\",\n  DATA: \"data\",\n  ADDRESS: \"address\",\n  ENABLED: \"enabled\",\n  READ_WRITE: \"readWrite\",\n};\n\nexport const PIN_STATE = {\n  ON: \"1\",\n  OFF: \"0\",\n};\n\nexport const VIEW_OPTIONS = [\n  { value: \"table\", label: \"Table View\" },\n  { value: \"matrix\", label: \"Matrix View\" },\n];\n\n// styling consts\nexport const PIN_HEIGHT = 20;\nexport const DEFAULT_PIN_WIDTH = 80;\nexport const PIN_LABEL_MARGIN = 3;\nexport const SIGNIFICANCE_TEXT_WIDTH = 25;\n","import { path, slice } from \"ramda\";\nimport {\n  SET_PINS,\n  SET_PINS_WIDTH,\n  SET_TACTS,\n  SET_CURRENT_TACTS,\n  SET_RAS_PIN,\n  SET_CAS_PIN,\n  TOGGLE_RAS_CAS,\n  SET_CLOCK_PIN,\n  SET_ADDRESS_ROW_PINS,\n  SET_ADDRESS_COL_PINS,\n} from \"../actions\";\nimport { MEMORY_MODE, MEMORY_STATE, PIN_STATE, PINS } from \"../../helpers/consts\";\n\nconst initialState = {\n  address: PIN_STATE.OFF.repeat(4),\n  row: PIN_STATE.OFF.repeat(2),\n  col: PIN_STATE.OFF.repeat(2),\n  [PINS.RAS]: PIN_STATE.OFF,\n  [PINS.CAS]: PIN_STATE.OFF,\n  addressWidth: 4,\n  data: PIN_STATE.OFF.repeat(4),\n  dataWidth: 4,\n  enabled: MEMORY_STATE.ENABLED,\n  readWrite: MEMORY_MODE.WRITE,\n  clock: PIN_STATE.OFF,\n  tacts: 4,\n  currentTacts: 0,\n};\n\nconst pinsInfo = (state = initialState, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case SET_RAS_PIN:\n      return {\n        ...state,\n        [PINS.RAS]: payload,\n      };\n    case SET_CAS_PIN:\n      return {\n        ...state,\n        [PINS.CAS]: payload,\n      };\n    case SET_ADDRESS_ROW_PINS:\n      return {\n        ...state,\n        row: payload,\n      };\n    case SET_ADDRESS_COL_PINS:\n      return {\n        ...state,\n        col: payload,\n      };\n    case SET_CLOCK_PIN:\n      return {\n        ...state,\n        [PINS.CLOCK]: payload,\n      };\n\n    case SET_PINS:\n      return { ...state, [payload.type]: payload.value };\n\n    case TOGGLE_RAS_CAS: {\n      return {\n        ...state,\n        [PINS.RAS]: state[PINS.RAS] === PIN_STATE.ON ? PIN_STATE.OFF : PIN_STATE.ON,\n        [PINS.CAS]: state[PINS.CAS] === PIN_STATE.ON ? PIN_STATE.OFF : PIN_STATE.ON,\n      };\n    }\n    case SET_TACTS:\n      return { ...state, tacts: payload.tacts, currentTacts: payload };\n\n    case SET_CURRENT_TACTS:\n      return { ...state, currentTacts: payload };\n\n    case SET_PINS_WIDTH: {\n      const { type, width } = payload;\n      const updatedValue = state[type].padStart(width, \"0\").slice(-width);\n      const update = { [type]: updatedValue, [`${type}Width`]: width };\n      if (type === \"address\") {\n        update.row = slice(0, updatedValue.length / 2, updatedValue);\n        update.col = slice(updatedValue.length / 2, updatedValue.length, updatedValue);\n      }\n      return { ...state, ...update };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default pinsInfo;\n\nexport const selectData = (state) => path([\"pinsInfo\", \"data\"], state);\nexport const selectDataWidth = (state) => path([\"pinsInfo\", \"dataWidth\"], state);\nexport const selectAddressWidth = (state) => path([\"pinsInfo\", \"addressWidth\"], state);\nexport const selectEnabled = (state) => path([\"pinsInfo\", \"enabled\"], state);\nexport const selectMemoryMode = (state) => path([\"pinsInfo\", \"readWrite\"], state);\nexport const selectClock = (state) => path([\"pinsInfo\", \"clock\"], state);\nexport const selectTacts = (state) => path([\"pinsInfo\", \"tacts\"], state);\nexport const selectCurrentTacts = (state) => path([\"pinsInfo\", \"currentTacts\"], state);\n\nexport const selectRas = (state) => path([\"pinsInfo\", PINS.RAS], state);\nexport const selectCas = (state) => path([\"pinsInfo\", PINS.CAS], state);\n\nexport const selectAddressRowPins = (state) => {\n  return path([\"pinsInfo\", \"row\"], state);\n};\n\nexport const selectAddressColPins = (state) => {\n  return path([\"pinsInfo\", \"col\"], state);\n};\n\nexport const selectAddressPins = (state) => {\n  const addressRow = selectAddressRowPins(state);\n  const addressColumn = selectAddressColPins(state);\n  return `${addressRow}${addressColumn}`;\n};\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useMemo } from \"react\";\n\nexport const useAction = (actionFn) => {\n  const dispatch = useDispatch();\n  const memedAct = useMemo(() => actionFn, [actionFn]);\n  return useCallback(\n    function callback() {\n      dispatch(memedAct.apply(null, arguments));\n    },\n    [dispatch, memedAct]\n  );\n};\n","import { path } from \"ramda\";\nimport {\n  SET_IS_PIN_NOTATION_CLASSICAL,\n  SET_IS_TACTING_ENABLED,\n  SET_MEMORY_DISPLAY_TYPE,\n  SET_IS_RAS_CAS_ENABLED,\n} from \"../actions\";\n\nconst initialState = {\n  isPinsNotationClassical: false,\n  isTactingEnabled: false,\n  isRasCasEnabled: false,\n  memoryDisplayType: \"matrix\",\n};\n\nconst visualizationSettings = (state = initialState, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case SET_IS_PIN_NOTATION_CLASSICAL:\n      return {\n        ...state,\n        isPinsNotationClassical: payload.isClassical,\n      };\n    case SET_IS_TACTING_ENABLED:\n      return {\n        ...state,\n        isTactingEnabled: payload.isEnabled,\n        isRasCasEnabled: payload.isEnabled ? state.isRasCasEnabled : false,\n      };\n    case SET_IS_RAS_CAS_ENABLED:\n      return {\n        ...state,\n        isRasCasEnabled: payload.isEnabled,\n      };\n    case SET_MEMORY_DISPLAY_TYPE:\n      return {\n        ...state,\n        memoryDisplayType: payload.displayType,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default visualizationSettings;\n\nexport const selectIsPinNotationClassical = (state) =>\n  path([\"visualizationSettings\", \"isPinsNotationClassical\"], state);\n\nexport const selectIsTactingEnabled = (state) => path([\"visualizationSettings\", \"isTactingEnabled\"], state);\n\nexport const selectMemoryDisplayType = (state) => path([\"visualizationSettings\", \"memoryDisplayType\"], state);\n\nexport const selectIsRasCasEnabled = (state) => path([\"visualizationSettings\", \"isRasCasEnabled\"], state);\n","import { useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { map } from \"ramda\";\n\nimport { selectMemoryDisplayType } from \"../redux/reducers/visualizationSettings.red\";\nimport {\n  setMemory,\n  setPins,\n  setDatumInMemory,\n  setSelectedRowInMemory,\n  setSelectedColInMemory,\n  setClockPin,\n  readDatumFromMemory,\n} from \"../redux/actions\";\nimport {\n  selectAddressWidth,\n  selectDataWidth,\n  selectAddressPins,\n  selectData,\n  selectMemoryMode,\n  selectCurrentTacts,\n  selectClock,\n  selectAddressColPins,\n  selectAddressRowPins,\n  selectEnabled,\n  selectRas,\n} from \"../redux/reducers/pinsInfo.red\";\nimport { selectMemory, selectSelectedRow, selectSelectedColumn } from \"../redux/reducers/memory.red\";\nimport { MEMORY_MODE, MEMORY_STATE, PINS, PIN_STATE } from \"../helpers/consts\";\nimport { selectIsRasCasEnabled } from \"../redux/reducers/visualizationSettings.red\";\nimport { useAction } from \"./reactRedux.hks\";\n\n// This hook determines cell row and column order in matrix view\nexport const useCellOrder = () => {\n  const addressLength = useSelector(selectAddressWidth);\n  const getCellOrder = (cellIndex) => ({\n    column: cellIndex % Math.pow(2, Math.floor(addressLength / 2)),\n    row: Math.floor(cellIndex / Math.pow(2, Math.floor(addressLength / 2))),\n  });\n\n  const totalColumns = Math.pow(2, Math.floor(addressLength / 2));\n  const totalRows = Math.floor(Math.pow(2, addressLength) / Math.pow(2, Math.floor(addressLength / 2)));\n  return [getCellOrder, { totalRows, totalColumns }];\n};\n\n// This hook encapsulates the calculation of cell position in table / matrix view\nexport const useMemoryCSSMeasures = () => {\n  const displayType = useSelector(selectMemoryDisplayType);\n  const addressLength = useSelector(selectAddressWidth);\n  const dataLength = useSelector(selectDataWidth);\n\n  const [getCellOrder] = useCellOrder();\n\n  // vertical offset is needed to leave some place for header\n  const verticalOffset = 22;\n  const cellWidth = displayType === \"table\" ? 100 : 70;\n  const cellMargin = 2;\n  const cellHeight = displayType === \"table\" ? 20 : 33;\n\n  const containerWidth =\n    displayType === \"table\"\n      ? cellWidth * 2 + cellMargin\n      : (cellWidth + cellMargin) * Math.pow(2, Math.floor(addressLength / 2));\n  const containerHeight =\n    displayType === \"table\"\n      ? Math.pow(2, addressLength) * (cellHeight + cellMargin) + verticalOffset\n      : Math.pow(2, Math.ceil(addressLength / 2)) * (cellHeight + cellMargin);\n\n  const getCellPosition = (cellIndex) => {\n    if (displayType === \"table\") {\n      const cellY = verticalOffset + cellIndex * (cellHeight + cellMargin);\n      return {\n        cellX: cellWidth + cellMargin,\n        cellY,\n        textX: 2 * cellWidth,\n        textY: cellY + (cellHeight + cellMargin) / 2,\n      };\n    }\n    const { row, column } = getCellOrder(cellIndex);\n    return {\n      cellX: column * (cellWidth + cellMargin),\n      cellY: row * (cellHeight + cellMargin),\n      textX: column * (cellWidth + cellMargin) + cellWidth - cellMargin * 2,\n      textY: row * (cellHeight + cellMargin) + (cellHeight + cellMargin) / 2,\n    };\n  };\n\n  const getRowPosition = (rowIndex) => ({ x: 0, y: rowIndex * (cellHeight + cellMargin) });\n  const getColPosition = (colIndex) => ({ x: colIndex * (cellWidth + cellMargin), y: 0 });\n  const widthForChar = cellWidth / dataLength;\n  const MIN_FONT_SIZE = 13;\n  const MAX_FONT_SIZE = 20;\n\n  const rowMeasures = { width: containerWidth - cellMargin, height: cellHeight };\n  const colMeasures = { width: cellWidth, height: containerHeight - cellMargin };\n  return [\n    getCellPosition,\n    getColPosition,\n    getRowPosition,\n    {\n      cellWidth,\n      cellHeight,\n      cellMargin,\n      verticalOffset,\n      containerWidth,\n      containerHeight,\n      fontSize:\n        widthForChar > MAX_FONT_SIZE\n          ? MAX_FONT_SIZE\n          : widthForChar < MIN_FONT_SIZE\n          ? MIN_FONT_SIZE\n          : cellWidth / dataLength,\n    },\n    rowMeasures,\n    colMeasures,\n  ];\n};\n\n// This hook controlls memory datum width\n// Add adds zeros from the left to the datum, in case data width was increased\nexport const useControlMemoryDatumWidth = () => {\n  const setMemoryAct = useAction(setMemory);\n  const dataWidth = useSelector(selectDataWidth);\n  const memorizedInfo = useSelector(selectMemory);\n\n  useEffect(() => {\n    compose(\n      setMemoryAct,\n      map((cell) => ({\n        ...cell,\n        datum: cell.datum.padStart(dataWidth, PIN_STATE.OFF).slice(-dataWidth),\n      }))\n    )(memorizedInfo);\n  }, [dataWidth, setMemoryAct]);\n};\n\nexport const useTacting = () => {\n  // const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setClockPinAct = useAction(setClockPin);\n  const clock = useSelector(selectClock);\n  const currentTacts = useSelector(selectCurrentTacts);\n\n  // reset clock pin to 0 state after a small timeout\n  const resetClockTimeout = useRef(null);\n  useEffect(() => {\n    if (clock === PIN_STATE.ON) {\n      resetClockTimeout.current = setTimeout(() => {\n        setClockPinAct(PIN_STATE.OFF);\n      }, 500);\n    }\n    return () => clearTimeout(resetClockTimeout.current);\n  }, [clock, currentTacts, setClockPinAct]);\n\n  const handleSetClock = () => {\n    if (currentTacts > 0) {\n      setClockPinAct(PIN_STATE.ON);\n    }\n  };\n\n  return [handleSetClock];\n};\n\nexport const useReadWriteMemoryDatum = () => {\n  const setPinsAct = useAction(setPins);\n  const setSelectedRowInMemoryAct = useAction(setSelectedRowInMemory);\n  const setSelectedColInMemoryAct = useAction(setSelectedColInMemory);\n  const readDatumFromMemoryAct = useAction(readDatumFromMemory);\n\n  const memorizedInfo = useSelector(selectMemory);\n  const setDatumInMemoryAct = useAction(setDatumInMemory);\n  const address = useSelector(selectAddressPins);\n  const rasAddr = useSelector(selectAddressRowPins);\n  const casAddr = useSelector(selectAddressColPins);\n  const dataWidth = useSelector(selectDataWidth);\n  const datum = useSelector(selectData);\n  const memoryMode = useSelector(selectMemoryMode);\n  const isEnabled = useSelector(selectEnabled);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const selectedRow = useSelector(selectSelectedRow);\n  const selectedCol = useSelector(selectSelectedColumn);\n  const isRas = useSelector(selectRas) === PIN_STATE.ON;\n\n  const setDatum = (datum) => setPinsAct(PINS.DATA, datum);\n\n  // if memory state has been changed between read and write, reset the data\n  useEffect(() => {\n    if (memoryMode && currentTacts !== 0) {\n      setDatum(PIN_STATE.OFF.repeat(dataWidth));\n    }\n  }, [memoryMode]);\n\n  // update datum in memory if address is already selected\n  useEffect(() => {\n    if (\n      selectedRow &&\n      selectedCol &&\n      isEnabled === MEMORY_STATE.ENABLED &&\n      memoryMode === MEMORY_MODE.WRITE &&\n      currentTacts === 0\n    ) {\n      setDatumInMemoryAct(datum, `${selectedRow}${selectedCol}`);\n    }\n  }, [currentTacts, selectedCol, selectedRow, datum, isEnabled, setDatumInMemoryAct, memoryMode]);\n\n  // read datum from memory if address is already selected\n  useEffect(() => {\n    if (selectedRow && selectedCol && memoryMode === MEMORY_MODE.READ && currentTacts === 0) {\n      readDatumFromMemoryAct(address);\n    }\n  }, [\n    currentTacts,\n    memoryMode,\n    memorizedInfo,\n    address,\n    selectedRow,\n    selectedCol,\n    datum,\n    isEnabled,\n    readDatumFromMemoryAct,\n  ]);\n\n  useEffect(() => {\n    if (!currentTacts && (!isRasCasEnabled || !isRas) && casAddr) {\n      setSelectedColInMemoryAct(casAddr);\n    }\n    if (!currentTacts && (!isRasCasEnabled || isRas) && rasAddr) {\n      setSelectedRowInMemoryAct(rasAddr);\n    }\n  }, [isRasCasEnabled, isRas, casAddr, rasAddr, currentTacts, setSelectedRowInMemoryAct, setSelectedColInMemoryAct]);\n};\n","import React from \"react\";\nimport { map } from \"ramda\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./ToggleButtons.scss\";\n\nconst b = BEM(\"ToggleButtons\");\n\nconst ToggleButtons = ({\n  options,\n  handleSelect = () => {\n    /* noop */\n  },\n  selectedValue,\n  containerClassName,\n}) => {\n  const onSelect = (value) => () => handleSelect(value);\n\n  return (\n    <div className={`${b()} ${containerClassName}`}>\n      {map(\n        ({ value, label }) => (\n          <button\n            key={value}\n            className={b(\"option\", [selectedValue === value && \"selected\"])}\n            onClick={onSelect(value)}\n          >\n            {label}\n          </button>\n        ),\n        options\n      )}\n    </div>\n  );\n};\n\nexport default ToggleButtons;\n","import React from \"react\";\nimport BEM from \"../../helpers/BEM\";\n\nconst b = BEM(\"Memory\");\n\nconst Frame = ({ coords, measures, isShowSelected }) => {\n  const { x, y } = coords;\n  const { width, height } = measures;\n  return (\n    <rect\n      key={`${x}-${y}`}\n      transform=\"translate(1 1)\"\n      y={y}\n      x={x}\n      width={width - 2}\n      height={height - 2}\n      className={b(\"frame\", [isShowSelected ? \"selected\" : \"preselected\"])}\n    />\n  );\n};\n\nexport default Frame;\n","import React, { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport BEM from \"../../helpers/BEM\";\nimport { selectMemory, selectSelectedColumn, selectSelectedRow } from \"../../redux/reducers/memory.red\";\nimport { selectAddressRowPins, selectAddressColPins, selectAddressWidth } from \"../../redux/reducers/pinsInfo.red\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setMemoryDisplayType } from \"../../redux/actions\";\nimport { selectIsRasCasEnabled, selectMemoryDisplayType } from \"../../redux/reducers/visualizationSettings.red\";\nimport { useMemoryCSSMeasures } from \"../../hooks/memoryView.hks\";\nimport ToggleButtons from \"../ToggleButtons\";\nimport { VIEW_OPTIONS } from \"../../helpers/consts\";\nimport Frame from \"./Frame\";\n\nimport \"./Memory.scss\";\n\nconst b = BEM(\"Memory\");\n\nconst Memory = () => {\n  const setMemoryDisplayTypeAct = useAction(setMemoryDisplayType);\n\n  const memorizedInfo = useSelector(selectMemory);\n  const displayType = useSelector(selectMemoryDisplayType);\n  const preselectedCol = useSelector(selectAddressColPins);\n  const selectedColumn = useSelector(selectSelectedColumn);\n  const preselectedRow = useSelector(selectAddressRowPins);\n  const selectedRow = useSelector(selectSelectedRow);\n  const addressWidth = useSelector(selectAddressWidth);\n  const memoryDisplayType = useSelector(selectMemoryDisplayType);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const preselectedAddress = `${preselectedRow}${preselectedCol}`;\n  const selectedAddress = `${selectedRow}${selectedColumn}`;\n  const isFullAddressSelected = useMemo(() => selectedAddress.length === addressWidth, [addressWidth, selectedAddress]);\n\n  const [\n    getCellCoordinates,\n    getColCoordinates,\n    getRowCoordinates,\n    { cellWidth, cellHeight, cellMargin, verticalOffset: headerHeight, containerWidth, containerHeight, fontSize },\n    rowMeasures,\n    colMeasures,\n  ] = useMemoryCSSMeasures();\n\n  const selectedRowIndex = parseInt(selectedRow, 2);\n  const preselectedRowIndex = parseInt(preselectedRow, 2);\n  const selectedColIndex = parseInt(selectedColumn, 2);\n  const preselectedColIndex = parseInt(preselectedCol, 2);\n\n  const selectedRowCoords = getRowCoordinates(selectedRowIndex);\n  const preselectedRowCoords = getRowCoordinates(preselectedRowIndex);\n  const selectedColCoords = getColCoordinates(selectedColIndex);\n  const preselectedColCoords = getColCoordinates(preselectedColIndex);\n\n  const isShowSelectedRow = isRasCasEnabled ? selectedRow === preselectedRow : selectedAddress === preselectedAddress;\n  const isShowSelectedCol = isRasCasEnabled\n    ? selectedColumn === preselectedCol\n    : selectedAddress === preselectedAddress;\n\n  const renderColumnHeader = (text, x, y) => (\n    <text className={b(\"header\")} x={x} y={y}>\n      {text}\n    </text>\n  );\n\n  const renderMemoryView = () =>\n    memorizedInfo.map((cell, cellIndex) => {\n      const { cellX, cellY, textX, textY } = getCellCoordinates(cellIndex);\n\n      const preselectedAddressStyles = parseInt(preselectedAddress, 2) === cellIndex ? \"preselected\" : \"\";\n      const selectedAddressStyles =\n        selectedAddress === preselectedAddress && parseInt(selectedAddress, 2) === cellIndex && isFullAddressSelected\n          ? \"selected\"\n          : \"\";\n      const dirtyAddressStyles = cell.isDirty ? \"dirty\" : \"\";\n\n      return (\n        <g key={cellIndex}>\n          {displayType === \"table\" && (\n            <g>\n              <rect\n                x={0}\n                y={cellY}\n                width={cellWidth}\n                height={cellHeight}\n                className={b(\"cellAddress\", [selectedAddressStyles || preselectedAddressStyles, dirtyAddressStyles])}\n              ></rect>\n              <text className={b(\"addressLabel\")} x={cellX - cellMargin} y={cellY + (cellHeight + cellMargin) / 2}>\n                {cellIndex}\n              </text>\n            </g>\n          )}\n          <g id={cellIndex}>\n            <rect\n              x={cellX}\n              y={cellY}\n              width={cellWidth}\n              height={cellHeight}\n              className={b(\"cell\", [selectedAddressStyles || preselectedAddressStyles, dirtyAddressStyles])}\n            />\n            <text className={b(\"dataLabel\")} x={textX} y={textY} fontSize={`${fontSize}px`}>\n              {cell.datum}\n            </text>\n          </g>\n        </g>\n      );\n    });\n\n  return (\n    <div className={b()}>\n      <ToggleButtons\n        containerClassName={b(\"viewOptions\")}\n        options={VIEW_OPTIONS}\n        selectedValue={memoryDisplayType}\n        handleSelect={setMemoryDisplayTypeAct}\n      />\n      <div className={b(\"memoryContainer\")}>\n        <svg style={{ minHeight: containerHeight, width: containerWidth }}>\n          <g>\n            {displayType === \"table\" && (\n              <g>\n                {renderColumnHeader(\"Address\", cellWidth - cellMargin, headerHeight / 2)}\n                {renderColumnHeader(\"Data\", cellWidth * 2, headerHeight / 2)}\n              </g>\n            )}\n            <g>\n              {renderMemoryView()}\n              {displayType === \"matrix\" && (\n                <>\n                  <Frame\n                    measures={colMeasures}\n                    coords={isShowSelectedCol ? selectedColCoords : preselectedColCoords}\n                    isShowSelected={isShowSelectedCol}\n                  />\n                  <Frame\n                    measures={rowMeasures}\n                    coords={isShowSelectedRow ? selectedRowCoords : preselectedRowCoords}\n                    isShowSelected={isShowSelectedRow}\n                  />\n                </>\n              )}\n            </g>\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default Memory;\n","import React from \"react\";\n\nimport BEM from \"../../../helpers/BEM\";\nimport {\n  PIN_STATE,\n  PIN_HEIGHT,\n  PIN_LABEL_MARGIN,\n  SIGNIFICANCE_TEXT_WIDTH,\n  DEFAULT_PIN_WIDTH,\n} from \"../../../helpers/consts\";\n\nimport \"./Pin.scss\";\n\nconst b = BEM(\"Pin\");\n\nconst Pin = ({\n  id,\n  pinState,\n  pinWidth,\n  handleDataPinClick,\n  isDisabled,\n  isNotationClassical,\n  isOneOfMany,\n  significance /* = 'MSB' | 'LSB' | undefined */,\n}) => {\n  return (\n    <g key={id} onClick={handleDataPinClick(id)}>\n      {significance && (\n        <text\n          x={-SIGNIFICANCE_TEXT_WIDTH}\n          y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN}\n          className={b(\"pinSignificance\")}\n        >\n          {significance}\n        </text>\n      )}\n      <text\n        x={0}\n        y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN}\n        className={b(\"pinLabel\", [pinState === PIN_STATE.ON && \"selected\", isDisabled && \"disabled\"])}\n      >\n        {pinState}\n      </text>\n      <rect\n        x={0}\n        y={id * PIN_HEIGHT}\n        height={PIN_HEIGHT}\n        width={pinWidth}\n        className={b(\"pinArea\", [isDisabled && \"disabled\"])}\n      />\n      <line\n        x1={0}\n        y1={id * PIN_HEIGHT + PIN_HEIGHT}\n        x2={DEFAULT_PIN_WIDTH}\n        y2={id * PIN_HEIGHT + PIN_HEIGHT}\n        className={b(\"pinLine\", [isNotationClassical && isOneOfMany ? \"short\" : \"long\"])}\n      />\n    </g>\n  );\n};\n\nexport default Pin;\n","import React, { useMemo } from \"react\";\n\nimport BEM from \"../../../helpers/BEM\";\nimport { DEFAULT_PIN_WIDTH, PIN_HEIGHT, PIN_LABEL_MARGIN } from \"../../../helpers/consts\";\nimport { usePrevious } from \"../../../hooks\";\n\nimport \"./CrossPinsNotation.scss\";\n\nconst b = BEM(\"CrossPinsNotation\");\n\nconst CrossPinsNotation = ({ pinWidth, isNotationClassical, numberOfPins }) => {\n  const crossedNotationYPosition = useMemo(() => (numberOfPins * PIN_HEIGHT) / 2 + PIN_HEIGHT / 2, [numberOfPins]);\n\n  const previousIsNotationClassical = usePrevious(isNotationClassical);\n\n  return (\n    <>\n      <line\n        x1={pinWidth}\n        y1={PIN_HEIGHT}\n        x2={pinWidth}\n        y2={numberOfPins * PIN_HEIGHT}\n        className={b(\"pinsDivider\", [isNotationClassical ? \"visible\" : \"invisible\"])}\n      />\n      <text\n        x={45}\n        y={crossedNotationYPosition - PIN_LABEL_MARGIN}\n        className={b(\"pinsNumber\", [isNotationClassical ? \"visible\" : \"invisible\"])}\n      >\n        {numberOfPins}\n      </text>\n      <line\n        x1={isNotationClassical ? 50 : DEFAULT_PIN_WIDTH}\n        y1={crossedNotationYPosition}\n        x2={isNotationClassical ? 70 : DEFAULT_PIN_WIDTH}\n        y2={crossedNotationYPosition}\n        className={b(\"crossNotation\", [isNotationClassical ? \"visible\" : \"invisible\"])}\n      />\n      {numberOfPins > 1 && (\n        <line\n          x1={pinWidth}\n          y1={crossedNotationYPosition}\n          x2={DEFAULT_PIN_WIDTH}\n          y2={crossedNotationYPosition}\n          className={b(\"pinsNotation\", [\n            isNotationClassical &&\n              (previousIsNotationClassical === null || previousIsNotationClassical === isNotationClassical\n                ? \"visible\"\n                : \"visibleAnimated\"),\n            !isNotationClassical && \"invisible\",\n          ])}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CrossPinsNotation;\n","import { useEffect, useRef } from \"react\";\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\nexport const usePrevious = (value, initialValue = null) => {\n  const prev = useRef(initialValue);\n  useEffect(() => {\n    prev.current = value;\n  }, [value]);\n  return prev.current;\n};\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { update, includes } from \"ramda\";\nimport { useSelector } from \"react-redux\";\n\nimport BEM from \"../../helpers/BEM\";\nimport { selectIsPinNotationClassical } from \"../../redux/reducers/visualizationSettings.red\";\nimport { PIN_STATE, DEFAULT_PIN_WIDTH, SIGNIFICANCE_TEXT_WIDTH, PIN_HEIGHT } from \"../../helpers/consts\";\n\nimport Pin from \"./Pin\";\nimport CrossPinsNotation from \"./CrossPinsNotation\";\n\nimport \"./PinsBlock.scss\";\n\nconst b = BEM(\"PinsBlock\");\n\nconst PinsBlock = ({ binaryData, setBinaryData, isDisabled = false }) => {\n  const [binaryDataArray, setBinaryDataArray] = useState(`${binaryData}`.split(\"\"));\n  const numberOfPins = binaryDataArray.length;\n  const isNotationClassical = useSelector(selectIsPinNotationClassical);\n  const pinWidth = useMemo(() => (isNotationClassical ? 25 : DEFAULT_PIN_WIDTH), [isNotationClassical]);\n  const viewBoxWidth = useMemo(() => DEFAULT_PIN_WIDTH + SIGNIFICANCE_TEXT_WIDTH, []);\n  const getIsFirstOrLastPin = useCallback((id) => includes(id, [0, binaryDataArray.length - 1]), [binaryDataArray]);\n\n  useEffect(() => {\n    if (binaryData) setBinaryDataArray(`${binaryData}`.split(\"\"));\n  }, [binaryData, setBinaryDataArray]);\n\n  const handleDataPinClick = useCallback(\n    (pinIndex) => () => {\n      if (isDisabled) return;\n      if (setBinaryData) {\n        const updatedPinValue = Number(binaryDataArray[pinIndex]) === 0 ? PIN_STATE.ON : PIN_STATE.OFF;\n        const updatedDataArray = update(pinIndex, updatedPinValue, binaryDataArray);\n        setBinaryDataArray(updatedDataArray);\n        setBinaryData(updatedDataArray.join(\"\"));\n      }\n    },\n    [binaryDataArray, isDisabled, setBinaryData]\n  );\n\n  const renderPin = useCallback(\n    (pin, id) => {\n      const significance = getIsFirstOrLastPin(id) && (id === 0 ? \"MSB\" : \"LSB\");\n      return (\n        <Pin\n          key={id}\n          id={id}\n          pinState={pin}\n          pinWidth={pinWidth}\n          defaultPinWidth={DEFAULT_PIN_WIDTH}\n          isOneOfMany={numberOfPins > 1}\n          isNotationClassical={isNotationClassical}\n          significance={numberOfPins > 1 && significance}\n          handleDataPinClick={handleDataPinClick}\n          isDisabled={isDisabled}\n        />\n      );\n    },\n    [isDisabled, numberOfPins, getIsFirstOrLastPin, handleDataPinClick, isNotationClassical, pinWidth]\n  );\n\n  return (\n    <div className={b()}>\n      <svg\n        className={b(\"list\")}\n        width={viewBoxWidth}\n        height={(numberOfPins + 1) * PIN_HEIGHT}\n        viewBox={`-${SIGNIFICANCE_TEXT_WIDTH} 0 ${viewBoxWidth} ${(binaryDataArray.length + 1) * PIN_HEIGHT}`}\n      >\n        {binaryDataArray.map(renderPin)}\n        <CrossPinsNotation pinWidth={pinWidth} isNotationClassical={isNotationClassical} numberOfPins={numberOfPins} />\n      </svg>\n    </div>\n  );\n};\n\nexport default PinsBlock;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setPins } from \"../../redux/actions\";\nimport { selectData, selectDataWidth, selectMemoryMode } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE, PINS } from \"../../helpers/consts\";\nimport BEM from \"../../helpers/BEM\";\nimport Pins from \"../PinsBlock\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst DataControls = () => {\n  const memoryMode = useSelector(selectMemoryMode);\n  const datum = useSelector(selectData);\n\n  const setPinsAct = useAction(setPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setDataLength = (width) => setPinsWidthAct(PINS.DATA, width);\n  const setDatum = (datum) => setPinsAct(PINS.DATA, datum);\n\n  const dataLength = useSelector(selectDataWidth);\n\n  const handleInputDataLength = (ev) => setDataLength(+ev.target.value);\n\n  return (\n    <div className={b(\"dataBlock\")}>\n      <label className={b(\"dataLabel\")}>\n        <div className={b(\"dataMode\")}>\n          <span className={b(\"dataModeLabel\")}>{memoryMode === MEMORY_MODE.WRITE ? \"Input: \" : \"Output: \"}</span>\n          <span>{datum}</span>\n        </div>\n        <div>Decimal: {parseInt(datum, 2)}</div>\n        <div className={b(\"bitsWidth\")}>width: {dataLength} bits</div>\n        <div className={b(\"rangeWrapper\", [\"data\"])}>\n          <input\n            name=\"dataLength\"\n            type=\"range\"\n            min={1}\n            max={8}\n            defaultValue={dataLength}\n            onInput={handleInputDataLength}\n          />\n        </div>\n      </label>\n      <Pins binaryData={datum} setBinaryData={setDatum} isDisabled={memoryMode === MEMORY_MODE.READ} />\n    </div>\n  );\n};\n\nexport default DataControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { slice } from \"ramda\";\n\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setAddressRowPins, setAddressColPins } from \"../../redux/actions\";\nimport {\n  selectAddressWidth,\n  selectRas,\n  selectCas,\n  selectAddressColPins,\n  selectAddressRowPins,\n} from \"../../redux/reducers/pinsInfo.red\";\nimport Pins from \"../PinsBlock\";\nimport { selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\nimport { PINS, PIN_STATE } from \"../../helpers/consts\";\n\nimport BEM from \"../../helpers/BEM\";\n\nconst b = BEM(\"MemoryControls\");\n\nexport const AddressControls = () => {\n  const addressRow = useSelector(selectAddressRowPins);\n  const addressColumn = useSelector(selectAddressColPins);\n\n  const addressLength = useSelector(selectAddressWidth);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const ras = useSelector(selectRas);\n  const cas = useSelector(selectCas);\n\n  const setAddressRowPinsAct = useAction(setAddressRowPins);\n  const setAddressColPinsAct = useAction(setAddressColPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setAddressLength = (width) => setPinsWidthAct(PINS.ADDRESS, width);\n\n  const handleInputAddressLength = ({ target }) => setAddressLength(+target.value);\n\n  const handleSetAddress = (value) => {\n    setAddressRowPinsAct(slice(0, value.length / 2, value));\n    setAddressColPinsAct(slice(value.length / 2, value.length, value));\n  };\n  const padLength = Math.max(addressLength - addressRow.length - addressColumn.length, 0);\n  const addressPins = `${\"0\".repeat(padLength)}${addressRow}${addressColumn}`;\n\n  return (\n    <div className={b(\"addressBlock\")}>\n      <label className={b(\"addressLabel\")}>\n        <div>Address: {addressPins}</div>\n        <div>Decimal: {parseInt(addressPins, 2)}</div>\n        <div className={b(\"bitsWidth\")}>width: {addressLength} bits</div>\n        <div className={b(\"rangeWrapper\", [\"address\"])}>\n          <input\n            name=\"addressLength\"\n            type=\"range\"\n            min={2}\n            max={8}\n            step={2}\n            defaultValue={addressLength}\n            onInput={handleInputAddressLength}\n          />\n        </div>\n      </label>\n      <div className={b(\"addressPins\")}>\n        {!isRasCasEnabled && <Pins binaryData={addressPins} setBinaryData={handleSetAddress} />}\n        {isRasCasEnabled && (\n          <>\n            {Number(ras) ? (\n              <div className={b(\"rowAddress\")}>\n                <span className={b(\"rowAddressLabel\", [ras === PIN_STATE.ON && \"active\"])}>\n                  write\n                  <br />\n                  row\n                  <br />\n                  address\n                </span>\n                <Pins binaryData={addressRow} setBinaryData={setAddressRowPinsAct} />\n              </div>\n            ) : null}\n            {Number(cas) ? (\n              <div className={b(\"colAddress\")}>\n                <span className={b(\"colAddressLabel\", [cas === PIN_STATE.ON && \"active\"])}>\n                  write\n                  <br />\n                  col\n                  <br />\n                  address\n                </span>\n                <Pins binaryData={addressColumn} setBinaryData={setAddressColPinsAct} />\n              </div>\n            ) : null}\n            <div className={b(\"ras\")}>\n              <span className={b(\"rasLabel\", [ras === PIN_STATE.ON && \"active\"])}>ras</span>\n              <Pins binaryData={ras} isDisabled />\n            </div>\n            <div className={b(\"cas\")}>\n              <span className={b(\"casLabel\", [cas === PIN_STATE.ON && \"active\"])}>cas</span>\n              <Pins binaryData={cas} isDisabled />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddressControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPins } from \"../../redux/actions\";\nimport { selectMemoryMode, selectEnabled } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE, MEMORY_STATE, PINS } from \"../../helpers/consts\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst StateControls = () => {\n  const memoryMode = useSelector(selectMemoryMode);\n  const enabled = useSelector(selectEnabled);\n\n  const setPinsAct = useAction(setPins);\n\n  const setMemoryState = (readWrite) => setPinsAct(PINS.READ_WRITE, readWrite);\n  const setEnabled = () => {\n    setPinsAct(PINS.ENABLED, enabled === MEMORY_STATE.ENABLED ? MEMORY_STATE.DISABLED : MEMORY_STATE.ENABLED);\n  };\n\n  return (\n    <div>\n      <div className={b(\"enabledBlock\")}>\n        <label onClick={setEnabled} className={b(\"enabledLabel\", [enabled === MEMORY_STATE.ENABLED && \"enabled\"])}>\n          Enable\n        </label>\n        <Pins binaryData={enabled} setBinaryData={setEnabled} />\n      </div>\n      <div className={b(\"readWriteBlock\")}>\n        <label className={b(\"readWriteLabel\")}>\n          <span\n            className={b(\"read\", [memoryMode === MEMORY_MODE.READ && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.READ)}\n          >\n            Read\n          </span>\n          /\n          <span\n            className={b(\"write\", [memoryMode === MEMORY_MODE.WRITE && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.WRITE)}\n          >\n            Write\n          </span>\n        </label>\n        <Pins binaryData={memoryMode} setBinaryData={setMemoryState} />\n      </div>\n    </div>\n  );\n};\n\nexport default StateControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setTacts } from \"../../redux/actions\";\nimport { selectClock, selectCurrentTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { selectTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { useTacting } from \"../../hooks/memoryView.hks\";\nimport { PIN_STATE } from \"../../helpers/consts\";\nimport { selectIsTactingEnabled } from \"../../redux/reducers/visualizationSettings.red\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst ClockControls = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n\n  const clock = useSelector(selectClock);\n  const tacts = useSelector(selectTacts);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const setTactsAct = useAction(setTacts);\n\n  const [handleClock] = useTacting();\n\n  return (\n    <div className={b(\"clockPinBlock\", [isTactingEnabled ? \"visible\" : \"hidden\"])}>\n      <label className={b(\"clockLabel\")}>\n        <div onClick={handleClock} className={b(\"clock\", [clock === PIN_STATE.ON && \"enabled\"])}>\n          Clock <span className={b(\"currentTacts\")}>({currentTacts} cycles left)</span>\n        </div>\n        <div className={b(\"tacts\")}>\n          <input\n            type=\"number\"\n            className={b(\"tactsNumber\")}\n            value={tacts}\n            onChange={(ev) => setTactsAct(ev.target.value)}\n          />{\" \"}\n          Cycles <span className={b(\"tactsNote\")}>determined by the hardware producer</span>\n        </div>\n      </label>\n      <Pins binaryData={clock} setBinaryData={handleClock} />\n    </div>\n  );\n};\n\nexport default ClockControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\n\nimport { useReadWriteMemoryDatum, useControlMemoryDatumWidth } from \"../../hooks/memoryView.hks\";\nimport BEM from \"../../helpers/BEM\";\nimport ToggleButtons from \"../ToggleButtons\";\nimport { setIsPinNotationClassical } from \"../../redux/actions\";\nimport { selectIsPinNotationClassical } from \"../../redux/reducers/visualizationSettings.red\";\nimport DataControls from \"./DataControls\";\nimport AddressControls from \"./AddressControls\";\nimport StateControls from \"./StateControls\";\nimport ClockControls from \"./ClockControls\";\n\nimport \"./MemoryControls.scss\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst pinNotationOptions = [\n  { value: false, label: \"Default\" },\n  { value: true, label: \"Classical\" },\n];\n\nconst MemoryControls = () => {\n  const setIsPinNotationClassicalAct = useAction(setIsPinNotationClassical);\n  const isPinNotationClassical = useSelector(selectIsPinNotationClassical);\n\n  useControlMemoryDatumWidth();\n  useReadWriteMemoryDatum();\n\n  return (\n    <span className={b()}>\n      <ToggleButtons\n        containerClassName={b(\"viewOptions\")}\n        options={pinNotationOptions}\n        selectedValue={isPinNotationClassical}\n        handleSelect={setIsPinNotationClassicalAct}\n      />\n      <DataControls />\n      <AddressControls />\n      <StateControls />\n      <ClockControls />\n    </span>\n  );\n};\n\nexport default MemoryControls;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setIsTactingEnabled, setIsRasCasEnabled, setCurrentTacts } from \"../../redux/actions\";\nimport { selectIsTactingEnabled, selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\n\nimport BEM from \"../../helpers/BEM\";\nimport \"./VisualizationSettings.scss\";\n\nconst b = BEM(\"VisualizationSettings\");\n\nconst VisualizationSettings = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n\n  const setIsTactingEnabledAct = useAction(setIsTactingEnabled);\n  const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setIsRasCasEnabledAct = useAction(setIsRasCasEnabled);\n\n  useEffect(() => {\n    if (!isTactingEnabled) setCurrentTactsAct(0);\n  }, [isTactingEnabled, setCurrentTactsAct]);\n\n  return (\n    <div className={b()}>\n      <label className={b(\"tacting\")}>\n        <input\n          className={b(\"tactingInput\")}\n          type=\"checkbox\"\n          checked={isTactingEnabled}\n          onChange={() => setIsTactingEnabledAct(!isTactingEnabled)}\n        />\n        Manual clock\n      </label>\n      <label className={b(\"rasCas\")}>\n        <input\n          className={b(\"rasCasInput\")}\n          type=\"checkbox\"\n          checked={isRasCasEnabled}\n          onChange={() => setIsRasCasEnabledAct(!isRasCasEnabled)}\n        />\n        RAS / CAS\n      </label>\n    </div>\n  );\n};\n\nexport default VisualizationSettings;\n","import React from \"react\";\n\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\n\nimport BEM from \"../../helpers/BEM\";\nimport \"./HowTo.scss\";\n\nconst b = BEM(\"HowTo\");\n\nconst HowTo = () => {\n  return (\n    <div className={b()}>\n      <h3 className={b(\"header\")}>How to:</h3>\n      <Accordion>\n        <AccordionItem className={b(\"accordionItem\")}>\n          <AccordionItemHeading>\n            <AccordionItemButton className={b(\"accordionButton\")}>write into memory</AccordionItemButton>\n          </AccordionItemHeading>\n          <AccordionItemPanel className={b(\"accordionContent\")}>\n            <ol className={b(\"instruction\")}>\n              <li>Pass the data to the input pins by clicking on the black lines in the Input block</li>\n              <li>Set \"Enable\" pin to 1 (click on a black line in Enable block), if it's currently in 0 state</li>\n              <li>\n                Make sure \"Read/Write\" pin is currently in \"write\" state (click on a black line in Read/Write block, if\n                not)\n              </li>\n              <li>Pass the needed address to the address pins by clicking on the black lines in the Address block</li>\n              <li>Your data is now written into the memory bank :)</li>\n            </ol>\n          </AccordionItemPanel>\n        </AccordionItem>\n        <AccordionItem className={b(\"accordionItem\")}>\n          <AccordionItemHeading>\n            <AccordionItemButton className={b(\"accordionButton\")}>read from memory</AccordionItemButton>\n          </AccordionItemHeading>\n          <AccordionItemPanel className={b(\"accordionContent\")}>\n            <ol className={b(\"instruction\")}>\n              <li>\n                Make sure \"Read/Write\" pin is currently in \"read\" state (click on a black line in Read/Write block, if\n                not)\n              </li>\n              <li>Set \"Enable\" pin to 1 (click on a black line in Enable block), if it's currently in 0 state</li>\n              <li>Pass the needed address to the address pins by clicking on the black lines in the Address block</li>\n              <li>The read data is now displayed on the data pins (black lines)</li>\n            </ol>\n          </AccordionItemPanel>\n        </AccordionItem>\n        <AccordionItem className={b(\"accordionItem\")}>\n          <AccordionItemHeading>\n            <AccordionItemButton className={b(\"accordionButton\")}>\n              write into memory with manual clock\n            </AccordionItemButton>\n          </AccordionItemHeading>\n          <AccordionItemPanel className={b(\"accordionContent\")}>\n            <ol className={b(\"instruction\")}>\n              <li>Tick \"Manual clock\" checkbox</li>\n              <li>\n                Make sure \"Read/Write\" pin is currently in \"write\" state (click on a black line in Read/Write block, if\n                not)\n              </li>\n              <li>Set \"Enable\" pin to 1 (click on a black line in Enable block), if it's currently in 0 state</li>\n              <li>Pass the data to the input pins by clicking on the black lines in the Input block</li>\n              <li>Pass the desired address to the address pins by clicking on the black lines in the Address block</li>\n              <li>\n                The data won't be written to the memory bank right away, because some predefined number of clock tacts\n                should pass. To see it more explicitly, we will \"tick\" the clock manually. Click on the clock pin a\n                predefined number of times (equal to the number of cycles indicated).\n              </li>\n              <li>Your data is now written into the memory bank :)</li>\n            </ol>\n          </AccordionItemPanel>\n        </AccordionItem>\n        <AccordionItem className={b(\"accordionItem\")}>\n          <AccordionItemHeading>\n            <AccordionItemButton className={b(\"accordionButton\")}>write into memory using RAS/CAS</AccordionItemButton>\n          </AccordionItemHeading>\n          <AccordionItemPanel className={b(\"accordionContent\")}>\n            <ol className={b(\"instruction\")}>\n              <li>Tick \"RAS/CAS\" checkbox</li>\n              <li>Pass the data to the input pins by clicking on the black lines in the Input block</li>\n              <li>Set \"Enable\" pin to 1 (click on a black line in Enable block), if it's currently in 0 state</li>\n              <li>\n                Make sure \"Read/Write\" pin is currently in \"write\" state (click on a black line in Read/Write block, if\n                not)\n              </li>\n              <li>\n                <em>RAS</em> pin is now active. Pass the desired <em>row</em> address to the address pins by clicking on\n                the black lines in the Address block\n              </li>\n              <li>\n                \"Tick\" the clock manually: click on the clock pin a predefined number of times (equal to the number of\n                cycles indicated).\n              </li>\n              <li>\n                <em>CAS</em> pin is now active. Pass the desired <em>column</em> address to the address pins by clicking\n                on the black lines in the Address block\n              </li>\n              <li>\n                \"Tick\" the clock manually: click on the clock pin (black line near Clock) a predefined number of times\n                (equal to the number of cycles indicated).\n              </li>\n              <li>Your data is now written into the memory bank :)</li>\n            </ol>\n          </AccordionItemPanel>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  );\n};\n\nexport default HowTo;\n","import React from \"react\";\n\nimport Memory from \"../Memory\";\nimport MemoryControls from \"../MemoryControls\";\nimport VisualizationSettings from \"../VisualizationSettings\";\nimport HowTo from \"../HowTo\";\n\nimport BEM from \"../../helpers/BEM\";\nimport \"./RAMVisualization.scss\";\n\nconst b = BEM(\"RAMVisualization\");\n\nconst RAMVisualization = () => {\n  return (\n    <div id=\"playground\" className={b()}>\n      <div className={b(\"container\")}>\n        <header className={b(\"caption\")}>\n          <h2>RAM Playground</h2>\n          <VisualizationSettings />\n        </header>\n        <div className={b(\"content\")}>\n          <div className={b(\"main\")}>\n            <div className={b(\"memoryCircuit\")}>\n              <div className={b(\"pins\")}>\n                <MemoryControls />\n              </div>\n              <div className={b(\"memory\")}>\n                <Memory />\n              </div>\n            </div>\n            <div className={b(\"notes\")}>\n              <div>＊ LSB - Least Significant Bit (right-most bit)</div>\n              <div>＊ MSB - Most Significant Bit (left-most bit)</div>\n            </div>\n          </div>\n          <div className={b(\"howTo\")}>\n            <HowTo />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RAMVisualization;\n","import React from \"react\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./ArticleSection.scss\";\n\nconst b = BEM(\"ArticleSection\");\n\nconst ArticleSection = ({ children, name, displayedName }) => {\n  return (\n    <div className={b(name)}>\n      <div className={b(\"content\")}>\n        {children}\n        <label className={b(\"confirmation\")}>\n          <input type=\"checkbox\" className={b(\"checkbox\")} />I have finished reading the section \"{displayedName}\"\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default ArticleSection;\n","import React from \"react\";\nimport BEM from \"../../helpers/BEM\";\n\nimport ArticleSection from \"../ArticleSection\";\n\nimport MemoryCellCircuit from \"../../icons/memoryCellCircuit.svg\";\nimport MemoryBlock from \"../../icons/memoryBlock.svg\";\nimport MemoryBlocks from \"../../icons/memoryBlocks.svg\";\nimport MemoryBank from \"../../icons/memoryBank.svg\";\nimport MemoryBankRowCol from \"../../icons/memoryBankRowCol.svg\";\nimport MemoryBankRasCas from \"../../icons/memoryBankRasCas.svg\";\n\nimport \"./RAMArticle.scss\";\n\nconst b = BEM(\"RAMArticle\");\n\nconst RAMArticle = () => {\n  return (\n    <div className={b()}>\n      <section className={b(\"preface\")}>\n        <h1 className={b(\"heading\", [\"primary\"])}>Random Access Memory [RAM]</h1>\n        <section className={b(\"contents\")}>\n          <a className={b(\"topicRef\")} href=\"#understandingRAM\">\n            Understanding RAM\n          </a>\n          <a className={b(\"topicRef\")} href=\"#clockTimingsChapter\">\n            Clock Timings\n          </a>\n          <a className={b(\"topicRef\")} href=\"#rasCasChapter\">\n            RAS and CAS\n          </a>\n          <a className={b(\"topicRef\", [\"emphasised\"])} href=\"#playground\">\n            Directly to RAM Playground\n          </a>\n        </section>\n      </section>\n      <ArticleSection name=\"introduction\" displayedName={\"Understanding RAM\"}>\n        <h2 id=\"understandingRAM\" className={b(\"heading\", [\"secondary\"])}>\n          Understanding RAM\n        </h2>\n        <p className={b(\"paragraph\")}>\n          RAM (Random Access Memory) is a high-speed storage that computers utilize to temporarily store and access the\n          working data. Each application we run on our computer requires some amount of temporary memory to operate\n          efficiently. In simple terms, RAM is like a pocket, where computer keeps the frequently needed data, while\n          keeping remaining stuff in the bag. The reason for this is that a computer can access this \"pocket\" with less\n          time compared to opening the \"bag\" and getting things out of it. The term random access as applied to RAM\n          comes from the fact that we can access any memory address directly and without any predefined order.\n        </p>\n        <p className={b(\"paragraph\")}>\n          The major activities of CPU (Central Processing Unit) include reading from RAM and writing to RAM. Modern\n          computer memory is organized in a set of rows and columns, much as a matrix. Similar to the matrix, memory is\n          organized in a set of rows and columns. To write or read from the specific memory address, we need to send the\n          desired address from the CPU to the memory. The address is passed to the memory in the binary form. Similarly,\n          the data inside the memory is written & read and stored in the binary form. The information is transmitted\n          between CPU and RAM using the buses. Bus is simply a collection of wires through which the data is\n          transmitted. Each wire transmits a single stream of 0s and 1s. So bus can transmit as many bits simultaneously\n          as many wires, or in other words lines, it has.\n        </p>\n        <p className={b(\"paragraph\")}>\n          There are such main categories of wires (buses) connecting the RAM to the CPU:\n          <ul>\n            <li>Address bus - sends bits of the selected memory address from the CPU to the memory.</li>\n            <li>\n              Data bus - is bidirectional, meaning it is used for both sending the actual data to the memory and getting\n              the read data from the memory.\n            </li>\n            <li>\n              Control bus with the following lines (wires):\n              <ul>\n                <li>\n                  Read / Write - instructs the memory that CPU would like to read data from the memory or write data\n                  into it;\n                </li>\n                <li>Output enable - controls whether the memory snoops the address bus and can drive the data bus.</li>\n              </ul>\n            </li>\n          </ul>\n        </p>\n        <p className={b(\"paragraph\")}>\n          The smallest atomic piece of memory is a memory cell which can store and retrieve just one bit of information,\n          either 1 or 0. The main parts of the memory cell circuit are the so-called flip-flop (it remembers the data\n          bit) and the so-called bi-directional bus transceiver (which controls the direction of data flow -- to the\n          flip-flop of from it).\n        </p>\n        <img src={MemoryCellCircuit} className={b(\"schema\", [\"cellCircuit\"])} />\n        <p className={b(\"paragraph\")}>\n          Or course, storing one bit of information is not very useful. But we are not limited to one memory cell. We\n          can put several elementary memory cells into a memory module and use an address to select one of them. For\n          example, if we take 256 memory cells we need an 8-bit wide address bus to have the ability to point to each of\n          our cells - to address it.\n        </p>\n        <img src={MemoryBlock} className={b(\"schema\", [\"cellBlock\"])} />\n        <p className={b(\"paragraph\")}>\n          But, first of all, one bit is too few for most practical usages. Let us group several memory modules with 256\n          bits each in parallel. The same address is sent to each module selecting the same address. As a result, memory\n          can read or write several bits at a time. For example, 8-bit memory means that such a memory module can read\n          or write 8 bits -- one byte at a time.\n        </p>\n        <img src={MemoryBlocks} className={b(\"schema\", [\"memoryBlocks\"])} />\n        <p className={b(\"paragraph\")}>\n          Instead of thinking of it as a series of individual memory modules and circuits, we will move to another level\n          of abstraction and think of it as a uniform bank of addressable memory, which can store 2<sup>M</sup> words of\n          the length N bit, where M is the width of the address bus and N is the width of the data bus.\n        </p>\n        <img src={MemoryBank} className={b(\"schema\", [\"memoryBank\"])} />\n        <p className={b(\"paragraph\")}>\n          Let us discuss a memory bank whose address bus has 8 address wires and data bus has 8 data wires. In this case\n          the CPU can access 2^8 = 256 address locations. The address range is from 0000 0000 to 1111 1111, which\n          represents a number in a range from 0 to 255 in decimal view. As there are 8 data wires, each location can\n          keep 8 bits of data (1 byte). The data range is the same, from 0000 0000 to 1111 1111 (from 0 to 255).\n        </p>\n      </ArticleSection>\n      <ArticleSection name=\"clockTimings\" displayedName={\"Clock Timings\"}>\n        <h2 id=\"clockTimingsChapter\" className={b(\"heading\", [\"secondary\"])}>\n          Clock Timings\n        </h2>\n        <p className={b(\"paragraph\")}>\n          Of course, passing of the information from CPU into RAM and vice versa is not executed immediately. It takes\n          some time to send the information at a certain speed through the wires and read / write it to the memory. The\n          delay which occurs in the data transmission as the data moves between CPU and RAM is called RAM latency. RAM\n          latency is measured in terms of memory bus clock cycles. A clock cycle is a pulse used to synchronize the\n          operations of the components of a CPU and other parts of the computer, such as a memory. The fewer clock\n          cycles, the lower the latency. The lower the latency, the better. The speed at which the CPU or the memory can\n          respond to the clock cycles is called its clock speed and is measured in hertz (Hz). One Hz equals to one\n          cycle per second. The number of cycles per second depends on the specific hardware and is defined by its\n          producers (you can find this information on the chips documentation). Today's personal computers run at a\n          clock speed of several gigahertz.\n        </p>\n        <p className={b(\"paragraph\")}>\n          The type of RAM which has its operations orchestrated by an externally supplied clock signal is called SDRAM\n          (Synchronous Dynamic random-access memory). So there is one more additional clock wire, which can either\n          supply 1 or 0 to indicate the constant change of clock cycles.\n        </p>\n      </ArticleSection>\n      <ArticleSection name=\"rasCas\" displayedName={\"RAS and CAS\"}>\n        <h2 id=\"rasCasChapter\" className={b(\"heading\", [\"secondary\"])}>\n          RAS and CAS\n        </h2>\n        <p className={b(\"paragraph\")}>\n          To this point, we were mainly talking about the memory address bus as a group of wires, which pass the index\n          of the memory location in the binary format. But, in fact, similar to the matrix, memory is organized into a\n          grid of rows and columns. So the address of some location is actually composed of its row and column address.\n          To activate a row of RAM, we have to send the memory controller the address of the row we're interested in,\n          and similarly, to activate a column, we have to send it the address of the column. These two addresses are\n          then combined together.\n        </p>\n        <img src={MemoryBankRowCol} className={b(\"schema\", [\"memoryBank\"])} />\n        <p className={b(\"paragraph\")}>\n          However, let us suppose that while we need 8 address bits, 8 address lines is too much for us for some reason.\n          How can we optimise this? Instead of having 8 wires passing the whole address to the memory bank\n          simultaneously, we can make use of only 4 address wires to first send 4 bits as a row number, and then using\n          the same wires send 4 bits as a column number.\n        </p>\n        <p className={b(\"paragraph\")}>\n          That's why, besides the clock wire, the RAM circuit has two additional control wires. These are RAS (Row\n          Access Strobe) and CAS (Column Access Strobe). When data is read or written into memory, the CPU activates the\n          RAS line to specify the row of the desired location, and then, after some number of cycles, activates the CAS\n          line to specify the column. Combined, the two signals give us the complete location address in DRAM, and only\n          after that the data is actually read or written.\n        </p>\n        <img src={MemoryBankRasCas} className={b(\"schema\", [\"memoryBank\"])} />\n      </ArticleSection>\n    </div>\n  );\n};\n\nexport default RAMArticle;\n","import React from \"react\";\n\nimport BEM from \"../../helpers/BEM\";\nimport RAMVisualization from \"../RAMVisualization\";\nimport RAMArticle from \"../RAMArticle\";\n\nimport \"./App.scss\";\n\nconst b = BEM(\"App\");\n\nfunction App() {\n  return (\n    <div className={b()}>\n      <RAMArticle />\n      <RAMVisualization />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport pinsInfo from \"./pinsInfo.red\";\nimport memory from \"./memory.red\";\nimport visualizationSettings from \"./visualizationSettings.red\";\n\nexport default combineReducers({ memory, pinsInfo, visualizationSettings });\n","import { takeEvery, put, all, select, call } from \"redux-saga/effects\";\nimport { compose } from \"ramda\";\n\nimport {\n  setSelectedRowInMemory,\n  setSelectedColInMemory,\n  setIsTactingEnabled,\n  SET_IS_RAS_CAS_ENABLED,\n  setPins,\n  toggleRasCas,\n  setCurrentTacts,\n  SET_CLOCK_PIN,\n  SET_IS_TACTING_ENABLED,\n  WRITE_DATUM_IN_MEMORY,\n  SET_PINS_WIDTH,\n  setMemory,\n  READ_DATUM_FROM_MEMORY,\n} from \"../actions\";\nimport { MEMORY_STATE, PINS, PIN_STATE } from \"../../helpers/consts\";\nimport { selectIsRasCasEnabled, selectIsTactingEnabled } from \"../reducers/visualizationSettings.red\";\nimport {\n  selectTacts,\n  selectCurrentTacts,\n  selectAddressWidth,\n  selectDataWidth,\n  selectEnabled,\n} from \"../reducers/pinsInfo.red\";\nimport { selectMemory } from \"../reducers/memory.red\";\n\nconst delay = (time) => new Promise((resolve) => setTimeout(resolve, time));\n\nfunction* onReadDatumFromMemory(action) {\n  const {\n    payload: { address },\n  } = action;\n  const memory = yield select(selectMemory);\n  const dataWidth = yield select(selectDataWidth);\n  const isEnabled = yield select(selectEnabled);\n\n  if (isEnabled === MEMORY_STATE.ENABLED) yield put(setPins(PINS.DATA, memory[parseInt(address, 2)].datum));\n  else put(setPins(PINS.DATA, PIN_STATE.OFF.repeat(dataWidth)));\n}\n\nfunction* resetAddressRowAndCol() {\n  // If tacting is NOT enabled, we can write the data into the column right away.\n  // This means, we do not need to erase the selected columns.\n  // Otherwise, we need to erase selected rows and columns, because selection should happen\n  // only after a predefined number of tacts.\n  const isTactingEnabled = yield select(selectIsTactingEnabled);\n\n  if (isTactingEnabled) {\n    yield call(delay, 1000);\n    yield put(setSelectedRowInMemory(undefined));\n    yield put(setSelectedColInMemory(undefined));\n  }\n}\n\nfunction* onWidthChange() {\n  const addressWidth = yield select(selectAddressWidth);\n  const dataWidth = yield select(selectDataWidth);\n  const memorizedInfo = yield select(selectMemory);\n\n  if (addressWidth) {\n    const updatedMemory = compose(\n      (memory) => memory.map((memoryCell, index) => memorizedInfo[index] || memoryCell),\n      (memory) =>\n        memory.fill({\n          isDirty: false,\n          datum: PIN_STATE.OFF.repeat(dataWidth),\n        })\n    )(new Array(Math.pow(2, addressWidth)));\n    yield put(setMemory(updatedMemory));\n  }\n}\n\nfunction* enableRasCasPins(action) {\n  if (action.payload.isEnabled) {\n    yield put(setPins(PINS.RAS, PIN_STATE.ON));\n    yield put(setIsTactingEnabled(true));\n  }\n}\n\nfunction* onSetTacting(action) {\n  if (action.payload.isEnabled) {\n    const ramLatency = yield select(selectTacts);\n    yield put(setCurrentTacts(ramLatency));\n  }\n  // If tacting is NOT enabled, we can write the data into the column right away.\n  // This means, we do not need to erase the selected columns.\n  // Otherwise, we need to erase selected rows and columns, because selection should happen\n  // only after a predefined number of tacts.\n  yield put(setSelectedRowInMemory(undefined));\n  yield put(setSelectedColInMemory(undefined));\n}\n\nfunction* updateNumberOfTacts(action) {\n  const currentTacts = yield select(selectCurrentTacts);\n  const clock = action.payload;\n  const isRasCasEnabled = yield select(selectIsRasCasEnabled);\n  const ramLatency = yield select(selectTacts);\n  if (clock === PIN_STATE.ON) {\n    yield put(setCurrentTacts(currentTacts - 1));\n  }\n  if (currentTacts === 0 && clock === PIN_STATE.OFF) {\n    // Reset current tacts to ramLatency, defined by hardware producer\n    yield put(setCurrentTacts(ramLatency));\n    if (isRasCasEnabled) {\n      // Change RAS to CAS and vice versa in case RAS/CAS is enabled and current tacts reached 0\n      yield put(toggleRasCas());\n    }\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery([WRITE_DATUM_IN_MEMORY, READ_DATUM_FROM_MEMORY], resetAddressRowAndCol),\n    takeEvery(READ_DATUM_FROM_MEMORY, onReadDatumFromMemory),\n    takeEvery(SET_IS_RAS_CAS_ENABLED, enableRasCasPins),\n    takeEvery(SET_IS_TACTING_ENABLED, onSetTacting),\n    takeEvery(SET_CLOCK_PIN, updateNumberOfTacts),\n    takeEvery(SET_PINS_WIDTH, onWidthChange),\n  ]);\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers from \"./redux/reducers\";\nimport sagas from \"./redux/sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = composeWithDevTools({});\n\nconst configureStore = () => {\n  const store = createStore(reducers, composeEnhancers(applyMiddleware(sagaMiddleware)));\n  sagaMiddleware.run(sagas);\n  return store;\n};\n\nexport default configureStore();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./commonStyles/index.scss\";\n\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}